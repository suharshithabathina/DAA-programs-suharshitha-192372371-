import heapq
from collections import defaultdict

def findTheCity(n, edges, distanceThreshold):
    graph = defaultdict(list)
    
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    
    def dijkstra(start):
        distances = [float('inf')] * n
        distances[start] = 0
        min_heap = [(0, start)]
        
        while min_heap:
            curr_dist, node = heapq.heappop(min_heap)
            if curr_dist > distances[node]:
                continue
            
            for neighbor, weight in graph[node]:
                distance = curr_dist + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(min_heap, (distance, neighbor))
        
        return distances
    
    city_count = float('inf')
    city_index = -1
    
    for i in range(n):
        reachable_cities = sum(1 for d in dijkstra(i) if d <= distanceThreshold)
        if reachable_cities <= city_count:
            city_count = reachable_cities
            city_index = i
    
    return city_index

# Example usage
print(findTheCity(4, [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], 4))  # Output: 3
print(findTheCity(5, [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], 2))  # Output: 0
