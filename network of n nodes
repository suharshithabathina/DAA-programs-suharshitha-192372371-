import heapq
from collections import defaultdict

def networkDelayTime(times, n, k):
    graph = defaultdict(list)
    for u, v, w in times:
        graph[u].append((v, w))
    
    min_heap = [(0, k)]
    time_to_receive = {i: float('inf') for i in range(1, n + 1)}
    time_to_receive[k] = 0
    
    while min_heap:
        curr_time, node = heapq.heappop(min_heap)
        
        for neighbor, travel_time in graph[node]:
            new_time = curr_time + travel_time
            if new_time < time_to_receive[neighbor]:
                time_to_receive[neighbor] = new_time
                heapq.heappush(min_heap, (new_time, neighbor))
    
    max_time = max(time_to_receive.values())
    return max_time if max_time < float('inf') else -1

# Example usage
print(networkDelayTime([[2,1,1],[2,3,1],[3,4,1]], 4, 2))  # Output: 2
print(networkDelayTime([[1,2,1]], 2, 1))  # Output: 1
print(networkDelayTime([[1,2,1]], 2, 2))  # Output: -1
