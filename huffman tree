import heapq
from collections import defaultdict

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(characters, frequencies):
    heap = [Node(char, freq) for char, freq in zip(characters, frequencies)]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)

    return heap[0]

def build_code_table(node, prefix='', code_table=None):
    if code_table is None:
        code_table = {}
    if node:
        if node.char is not None:
            code_table[node.char] = prefix
        build_code_table(node.left, prefix + '0', code_table)
        build_code_table(node.right, prefix + '1', code_table)
    return code_table

def decode_huffman(encoded_string, huffman_tree):
    decoded_message = []
    current_node = huffman_tree
    for bit in encoded_string:
        current_node = current_node.left if bit == '0' else current_node.right
        if current_node.char is not None:
            decoded_message.append(current_node.char)
            current_node = huffman_tree
    return ''.join(decoded_message)

# Test Case 1
n1 = 4
characters1 = ['a', 'b', 'c', 'd']
frequencies1 = [5, 9, 12, 13]
encoded_string1 = '1101100111110'

huffman_tree1 = build_huffman_tree(characters1, frequencies1)
decoded_message1 = decode_huffman(encoded_string1, huffman_tree1)
print(decoded_message1)  # Output: "abacd"

# Test Case 2
n2 = 6
characters2 = ['f', 'e', 'd', 'c', 'b', 'a']
frequencies2 = [5, 9, 12, 13, 16, 45]
encoded_string2 = '110011011100101111001011'

huffman_tree2 = build_huffman_tree(characters2, frequencies2)
decoded_message2 = decode_huffman(encoded_string2, huffman_tree2)
print(decoded_message2)  # Output: "fcbade"
