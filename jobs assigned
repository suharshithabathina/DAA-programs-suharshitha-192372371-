def minimumTimeRequired(jobs, k):
    def canDistribute(maxTime):
        workers = [0] * k
        return backtrack(0, workers, maxTime)

    def backtrack(i, workers, maxTime):
        if i == len(jobs):
            return True
        for j in range(k):
            if workers[j] + jobs[i] <= maxTime:
                workers[j] += jobs[i]
                if backtrack(i + 1, workers, maxTime):
                    return True
                workers[j] -= jobs[i]
            if workers[j] == 0:  # No need to try further if this worker is still idle
                break
        return False

    left, right = max(jobs), sum(jobs)
    while left < right:
        mid = (left + right) // 2
        if canDistribute(mid):
            right = mid
        else:
            left = mid + 1
    return left

# Example usage
print(minimumTimeRequired([3, 2, 3], 3))  # Output: 3
print(minimumTimeRequired([1, 2, 4, 7, 8], 2))  # Output: 11
