from itertools import combinations

def meet_in_the_middle(arr, target):
    n = len(arr)
    mid = n // 2
    
    # Generate all possible sums for the first half
    left_sums = set()
    for i in range(mid + 1):
        for combo in combinations(arr[:mid], i):
            left_sums.add(sum(combo))
    
    # Generate all possible sums for the second half
    right_sums = set()
    for i in range(n - mid + 1):
        for combo in combinations(arr[mid:], i):
            right_sums.add(sum(combo))
    
    # Check if there exists a pair of sums that equals the target
    for left_sum in left_sums:
        if (target - left_sum) in right_sums:
            return True
    return False

# Test cases
E1 = [1, 3, 9, 2, 7, 12]
target1 = 15
print(meet_in_the_middle(E1, target1))  # Output: True

E2 = [3, 34, 4, 12, 5, 2]
target2 = 15
print(meet_in_the_middle(E2, target2))  # Output: True
