import sys

def floyd_warshall(n, edges):
    # Initialize distance matrix
    dist = [[sys.maxsize] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
    
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  # Assuming undirected graph

    # Display distance matrix before applying the algorithm
    print("Distance matrix before applying Floyd's Algorithm:")
    for row in dist:
        print(row)

    # Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    # Display distance matrix after applying the algorithm
    print("\nDistance matrix after applying Floyd's Algorithm:")
    for row in dist:
        print(row)

    return dist

def find_shortest_path(dist, start, end):
    return dist[start][end]

# Input
n = 5
edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distanceThreshold = 2

# Execute Floyd's Algorithm
distance_matrix = floyd_warshall(n, edges)

# Test cases
shortest_path_C_to_A = find_shortest_path(distance_matrix, 2, 0)
print(f"\nShortest path from C to A: {shortest_path_C_to_A}")

shortest_path_E_to_C = find_shortest_path(distance_matrix, 4, 2)
print(f"Shortest path from E to C: {shortest_path_E_to_C}")
