def game_of_life(board):
    if not board:
        return
    
    rows, cols = len(board), len(board[0])
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    
    # Create a copy of the board to store the next state
    copy_board = [[board[r][c] for c in range(cols)] for r in range(rows)]
    
    for r in range(rows):
        for c in range(cols):
            live_neighbors = sum((0 <= r + dr < rows and 0 <= c + dc < cols and copy_board[r + dr][c + dc] == 1) for dr, dc in directions)
            
            if copy_board[r][c] == 1:
                if live_neighbors < 2 or live_neighbors > 3:
                    board[r][c] = 0
            else:
                if live_neighbors == 3:
                    board[r][c] = 1

# Example usage
board1 = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
game_of_life(board1)
print(board1)  # Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]

board2 = [[1,1],[1,0]]
game_of_life(board2)
print(board2)  # Output: [[1,1],[1,1]]
