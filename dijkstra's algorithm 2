import heapq

def dijkstra(n, edges, source, target):
    graph = {i: [] for i in range(n)}
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # Assuming undirected graph

    min_heap = [(0, source)]
    distances = {i: float('inf') for i in range(n)}
    distances[source] = 0

    while min_heap:
        current_distance, current_vertex = heapq.heappop(min_heap)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex]:
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(min_heap, (distance, neighbor))

    return distances[target]

# Test Case 1
n1 = 6
edges1 = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15),  
           (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source1 = 0
target1 = 4
output1 = dijkstra(n1, edges1, source1, target1)
print(output1)  # Output: 20

# Test Case 2
n2 = 5
edges2 = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9), 
           (3, 2, 7), (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source2 = 0
target2 = 3
output2 = dijkstra(n2, edges2, source2, target2)
print(output2)  # Output: 8
