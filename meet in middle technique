# Meet in the Middle Technique

from itertools import combinations

def closest_subset(arr, target):
    n = len(arr)
    mid = n // 2
    left_part = arr[:mid]
    right_part = arr[mid:]

    left_sums = {sum(comb) for r in range(len(left_part) + 1) for comb in combinations(left_part, r)}
    right_sums = {sum(comb) for r in range(len(right_part) + 1) for comb in combinations(right_part, r)}

    closest_sum = float('inf')

    for left_sum in left_sums:
        for right_sum in right_sums:
            current_sum = left_sum + right_sum
            if abs(target - current_sum) < abs(target - closest_sum):
                closest_sum = current_sum

    return closest_sum

# Test cases
set1 = [45, 34, 4, 12, 5, 2]
set2 = [1, 3, 2, 7, 4, 6]

target_sum1 = 42
target_sum2 = 10

print("Closest sum to target", target_sum1, "is:", closest_subset(set1, target_sum1))
print("Closest sum to target", target_sum2, "is:", closest_subset(set2, target_sum2))
