# Minimum Path Distance using Matrix Form

import itertools

def calculate_min_path_distance(matrix):
    n = len(matrix)
    min_distance = float('inf')
    
    for perm in itertools.permutations(range(n)):
        current_distance = 0
        for i in range(n - 1):
            current_distance += matrix[perm[i]][perm[i + 1]]
        current_distance += matrix[perm[-1]][perm[0]]  # Return to starting point
        min_distance = min(min_distance, current_distance)
    
    return min_distance

# Test Cases
test_case_1 = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

test_case_2 = [
    [0, 10, 10, 10],
    [10, 0, 10, 10],
    [10, 10, 0, 10],
    [10, 10, 10, 0]
]

test_case_3 = [
    [0, 1, 2, 3],
    [1, 0, 4, 5],
    [2, 4, 0, 6],
    [3, 5, 6, 0]
]

print(calculate_min_path_distance(test_case_1))  # Output: 80
print(calculate_min_path_distance(test_case_2))  # Output: 40
print(calculate_min_path_distance(test_case_3))  # Output: 12
